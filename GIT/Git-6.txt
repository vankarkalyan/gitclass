



Rearranging the commit history
-------------------------------
The commit history can be changed according to
our requirment using the git rebase command
The latest commit or the top most commit is genrally
 called HEAD.We can make this HEAD point to any
older commit and make that older commit as the latest
commit

Note: The very first commit is called as initial
commit and this cannot be rearranged

git rebase -i HEAD~4

The number 4 represents the top 4 comits that we want
to rearrange
The above command will open the commit hsitory in vi
editor where can can simply change the commit order
Save and Quit   Esc :wq Enter


Git Squash
=============
Squash is merging of commits to make multiple 
commits to make it look like a single commit.

git rebase -i HEAD~4
The above command will open in vi editor
where the complete commit history is shown
Remove the pick word and replace it with
squash
Save and quit  esc : wq Enter  

Check the commit history
git log --oneline

Modifing exisiting commits
=============================
whenever we modify a file or create new files generally we create a new commit.Instead we can put the modifications in the existing commit itself rather than creating a new commit.
This can be done using git amend command

1 Create few commits in git LR
  touch f1
  git add .
  git commit -m "a"
  touch f2
  git add .
  git commit -m "b"
  touch f3
  git add .
  git commit -m "c"

2 Check the commit history
  git log --oneline

3 Modify some files or create new files
  cat > f3
  Put some data
  ctrl+d to comeout of cat

4 check status of git
  git status
  We will find a modified file

5 Send it to stagging area
  git add .

6 Commit it to local repositry as an exisiting commmit
  git commit --amend -m "c"

7 Check the commit history
  git log --oneline
  We will see that new commit is not created the changes are
  pushed into the exisiting "c" commit

Note: git amend actually creates a new commit.
The older "c" commit becomes an orphaned commit which 
cannot be see using git log

We can use "git reflog" for seeing the entire commit
history.ie active and orphaned commits


Git cherry pick
====================
This is used for choosing which commits we want to take
into the master branch
Generally when we perform "git merge" or "git rebase"
all the commits of that branch will come into master branch
Cherry pick will allow us to select only those commits that we require and merge them with master


1 Create few commits on master
  touch f1
  git add .
  git commit -m "a"
  touch f2
  git add .
  git commit -m "b"

2 Create a branch and some commits on it
  git checkout -b sprint-1

3 Create some commits here
  touch f3
  git add .
  git commit -m "c
  touch f4
  git add .
  git commit -m "d"
  touch f5
  git add .
  git commit -m "e"

4 Check the commit history on sprint-1 branch
  git log --oneline

5 Identify the commits that we want from sprint-1 branch
  and move back to master branch
  git checkout master
  git cherry-pick commit_id1 commit_id2

6 Check the commit history on master
  git log --oneline

git stash
==============
This is a feature of git which is used for leaving unfinished work and start a new functionality related coding.
Further command nof git should not touch the unfinished files

1 To stash the files present in stagging area
  git stash 

2 To stash the files present in stagging area and untracked  section
  git stash -u

3 To stash the files present in stagging area,untracked section   and also the .gitignore
  git stash -a

4 To see the list of all stashes that we have done
  git stash list

5 To unstash the latest stash
  git stash pop

6 To unstash any older stash
  git stash pop stash{stashno}
  Eg: To unstash the second last stash
      git stash pop stash{1}



172.31.34.177
























































 













  


























































 































































 